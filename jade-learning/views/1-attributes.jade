extend ./layout
block content
  h2 Attributes
  h3 Tag attributes look similar to html, however their values are just regular JavaScript.
  a(class="button" href="http://www.baidu.com") baidu
  - var authenticated = true
    div(class = authenticated ? 'authed' : 'anon') test variable
  input(
    type="checkbox"
    name="agreement"
    checked
  )
  hr
  h2 Unescaped Attributes
  h3 By default, all attributes are escaped (replacing special characters with escape sequences) to prevent attacks such as cross site scripting. If you need to use special characters you can use != instead of =.
  div(escaped="<code>")
  div(unescaped!="<code>")
  small 看生成的代码没有转成 &lt;code&gt; 好奇怪
  hr
  h2 Boolean Attributes
  h3 Boolean attributes are mirrored by Jade, and accept bools, aka true or false. When no value is specified true is assumed.
  input(type="checkbox" checked)
  input(type="checkbox" checked=true)
  input(type="checkbox" checked=false)
  input(type="checkbox" checked=true.toString())
  small If the doctype is html jade knows not to mirror the attribute and uses the terse style (understood by all browsers).
  input(type="checkbox" checked=true&&'checked')
  hr
  h2 Style Attributes
  h3 The style attribute can be a string (like any normal attribute) but it can also be an object, which is handy when parts of the style are generated by JavaScript.
  a(style={color:'red','background-color':'green'}) link
  hr
  h2 Class Attributes
  h3 The class attribute can be a string (like any normal attribute) but it can also be an array of class names, which is handy when generated from JavaScript.
  - var classes = ['foo','bar','baz']
  a(class=classes)= classes
  - var currentUrl = '/1-attributes'
  p
    a(class={active: currentUrl === '/'} href="/") /
  p
    a(class={active: currentUrl === '/1-attributes'} href="/1-attributes") /1-attributes   
  hr
  h2 ID Literal
  h3 IDs may be defined using a #idname syntax:
  a#main-link linkIdMainLink
  #content divIdContent
  h2 &attributes
  h3 Pronounced "and attributes", the &attributes syntax can be used to explode an object into attributes of an element.
  - var attributes = {'data-foo':'bar'}
  div#foo(data-bar="foo")&attributes(attributes) &attributes
